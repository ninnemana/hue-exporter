name: Publish
on:
  push:
    branches:
      - master

jobs:
  build:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@master

    - name: Setup go
      uses: actions/setup-go@v1
      with:
        go-version: 1.17

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.29
        args: --timeout 5m0s

    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    - run: go test ./...

  publish:
    needs:
      - build
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: gcr.io/ninneman-org
      DOCKER_IMAGE: hue-exporter
      DOCKER_FILE: Dockerfile
      DOCKER_TARGET_PLATFORMS: linux/amd64,linux/arm/v7,linux/arm64/v8
    steps:
    - uses: actions/checkout@v1

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1
      id: buildx
      with:
        install: true

    - name: Prepare Variables
      if: success()
      id: prepare
      run: |
        echo ::set-output name=docker_platforms::${DOCKER_TARGET_PLATFORMS}
        echo ::set-output name=docker_image::${DOCKER_REGISTRY}/${DOCKER_IMAGE}
        echo ::set-output name=docker_file::${DOCKER_FILE}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - uses: google-github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.GCLOUD_EMAIL }}
        service_account_key: ${{ secrets.GCLOUD_AUTH }}
        export_default_credentials: true

    - name: Docker Login
      if: success()
      id: login
      run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker

    - name: Docker Build/Tag/Push
      if: success()
      id: build
      run: |
        docker buildx build \
          --platform ${{steps.prepare.outputs.docker_platforms}} \
          --file ${{steps.prepare.outputs.docker_file}} \
          --tag ${{steps.prepare.outputs.docker_image}}:${{ github.sha }} \
          --tag ${{steps.prepare.outputs.docker_image}}:latest \
          --push \
          .
